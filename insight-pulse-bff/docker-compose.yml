version: '3.8'

services:
  nginx: # NEW SERVICE: Nginx reverse proxy
    build:
      context: .             # Build context is the current directory
      dockerfile: dockerfile.nginx # Use the new Dockerfile.nginx
    ports:
      - "80:80"   # Expose Nginx on host port 80 (HTTP)
      # - "443:443" # Uncomment and configure for HTTPS in production
    depends_on:
      - app # Nginx depends on the app (BFF) service being available
      # - pulse-agent-manager # Uncomment and add if Nginx also directly proxies pulse-agent-manager
    networks:
      - pulse_net # Ensure Nginx is on the same network as BFF and DB
    volumes:
      # Mount your Nginx configuration
      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf:ro # Read-only mount

      # Mount your frontend files directly to Nginx's serving directory for development
      # This allows Nginx to serve the latest local changes without rebuilding its image
      - ./frontend:/usr/share/nginx/html:ro

      # Optional: Mount a directory for SSL certificates if using HTTPS
      # - ./nginx/certs:/etc/nginx/certs:ro

  app:
    build: .
 #   ports:
 #     - "8009:8000"
    volumes:
      - .:/app # Mount current directory to /app for live reloading during development
    env_file:
      - ./.env # Load environment variables from .env file
    depends_on:
      - db # Ensure db service starts before app
    command: ["uvicorn", "main:app", "--host", "0.0.0.0", "--port", "8000", "--reload"] # Enable reload for dev
    networks:
      - pulse_net

  db:
    image: postgres:16-alpine # Using a lightweight PostgreSQL image
    volumes:
      - postgres_data:/var/lib/postgresql/data/ # Persistent data volume
    env_file:
      - ./.env # Load PostgreSQL specific environment variables from .env
    environment: # Explicitly define environment variables for the Postgres container
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "5433:5432" # Expose DB port to host (optional, for direct connection if needed)
    networks:
      - pulse_net

volumes:
  postgres_data: # Define the named volume for PostgreSQL data persistence

networks:
  pulse_net: # Define a custom network for inter-service communication
    driver: bridge
    external: true