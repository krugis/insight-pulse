# nginx/nginx.conf

server {
    listen 80; # Nginx will listen on port 80 (HTTP)
    server_name localhost; # Replace with your domain name in production (e.g., yourdomain.com)

    # IMPORTANT: Docker's internal DNS resolver
    # This allows Nginx to dynamically resolve service names (like 'app') at runtime
    # The 127.0.0.11 is the IP of Docker's embedded DNS server in most networks.
    resolver 127.0.0.11 valid=30s; # Cache DNS lookups for 30 seconds

    # Define the upstream host as a variable.
    # Nginx resolves variables at runtime, not during config parsing.
    set $app_upstream_host "app"; # 'app' is the Docker Compose service name

    # Root for serving static frontend files
    root /usr/share/nginx/html;
    index index.html index.htm; # Default file to serve

    # Proxy API requests to the BFF service
    location /api/v1/ {
        # Use the variable for dynamic resolution in proxy_pass
        # $request_uri captures the rest of the URI after /api/v1/
        proxy_pass http://$app_upstream_host:8000/api/v1/$request_uri;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_buffering off;
    }

    # Handle all other requests by trying to serve static files first
    location / {
        try_files $uri $uri/ /index.html; # For single-page applications, routes to index.html if file not found
    }

    # Optional: For HTTPS (recommended for production)
    # listen 443 ssl;
    # ssl_certificate /etc/nginx/certs/yourdomain.crt;
    # ssl_certificate_key /etc/nginx/certs/yourdomain.key;
    # include /etc/nginx/snippets/ssl-params.conf; # You'd create this file
}